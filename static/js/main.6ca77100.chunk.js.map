{"version":3,"sources":["types/FilterTypes.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["FilterType","TodoList","todos","todoId","onSelectTodo","onSelectUser","className","map","id","title","completed","userId","classNames","type","onClick","handleSelect","TodoFilter","query","filterType","onClear","onChange","onChangeFilterType","value","event","target","All","Active","Completed","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","TodoModal","useState","selectedUser","setSelectedUser","useEffect","fetchUser","a","userData","todo","find","tod","href","email","name","App","setTodos","error","setError","setFilterType","isLoading","setIsLoading","setQuery","selectedTodoId","setSelectedTodoId","selectedUserId","setSelectedUserId","fetchTodos","data","handleSelectTodo","handleSelectUser","filteredTodos","useMemo","length","filter","lowerCaseTitle","toLowerCase","lowerCaseQuery","includes","color","textAlign","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6ca77100.chunk.js","sourcesContent":["export enum FilterType {\n  All = 'all',\n  Completed = 'completed',\n  Active = 'active',\n}\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  todoId: number,\n  onSelectTodo: (id: number) => void,\n  onSelectUser: (userId: number) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  todoId,\n  onSelectTodo,\n  onSelectUser,\n}) => {\n  const handleSelect = (id: number, userId: number) => {\n    onSelectTodo(id);\n    onSelectUser(userId);\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(({\n          id,\n          title,\n          completed,\n          userId,\n        }) => (\n          <tr\n            key={id}\n            data-cy=\"todo\"\n            className=\"has-background-info-white\"\n          >\n            <td className=\"is-vcentered\">\n              {id}\n            </td>\n            <td className=\"is-vcentered\">\n              {completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className={\n                classNames(completed\n                  ? 'has-text-success'\n                  : 'has-text-danger')\n              }\n              >\n                {title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => handleSelect(id, userId)}\n              >\n                <span className=\"icon\">\n                  <i\n                    className={classNames('far',\n                      { 'fa-eye': id !== todoId },\n                      { 'fa-eye-slash': id === todoId })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","/* eslint-disable max-len */\nimport React from 'react';\nimport { FilterType } from '../../types/FilterTypes';\n\ntype Props = {\n  query: string,\n  filterType: FilterType,\n  onClear: () => void,\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void,\n  onChangeFilterType: (type: FilterType) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  filterType,\n  onClear,\n  onChange,\n  onChangeFilterType,\n}) => {\n  const handleFilterTypeChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    onChangeFilterType(event.target.value as FilterType);\n  };\n\n  const handleClearButtonClick = () => {\n    onClear();\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filterType}\n            onChange={handleFilterTypeChange}\n          >\n            <option value={FilterType.All}>All</option>\n            <option value={FilterType.Active}>Active</option>\n            <option value={FilterType.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          onChange={onChange}\n          value={query}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleClearButtonClick}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  userId: number,\n  todoId: number,\n  onSelectTodo: (id: number) => void,\n  onSelectUser: (userId: number) => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  todos,\n  userId,\n  todoId,\n  onSelectTodo,\n  onSelectUser,\n}) => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      const userData = await getUser(userId);\n\n      setSelectedUser(userData);\n    };\n\n    fetchUser();\n  }, [userId]);\n\n  const todo = todos.find((tod) => tod.id === todoId);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!selectedUser ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todoId}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => {\n                onSelectTodo(0);\n                onSelectUser(0);\n              }}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${selectedUser.email}`}>\n                {selectedUser.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useState, useEffect, useMemo } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { FilterType } from './types/FilterTypes';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [error, setError] = useState(false);\n  const [filterType, setFilterType] = useState(FilterType.All);\n  const [isLoading, setIsLoading] = useState(false);\n  const [query, setQuery] = useState('');\n  const [selectedTodoId, setSelectedTodoId] = useState(0);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n\n  useEffect(() => {\n    const fetchTodos = async () => {\n      setIsLoading(true);\n      try {\n        const data = await getTodos();\n\n        setTodos(data);\n        setIsLoading(false);\n      } catch {\n        setError(true);\n        setIsLoading(false);\n      }\n    };\n\n    fetchTodos();\n  }, []);\n\n  const handleSelectTodo = (id: number) => {\n    setSelectedTodoId(id);\n  };\n\n  const handleSelectUser = (userId: number) => {\n    setSelectedUserId(userId);\n  };\n\n  const handleClearQuery = () => {\n    setQuery('');\n  };\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  const handleFilterTypeChange = (type: FilterType) => {\n    setFilterType(type);\n  };\n\n  const filteredTodos = useMemo(() => {\n    if (!query.length && filterType === FilterType.All) {\n      return todos;\n    }\n\n    return todos.filter(({ title, completed }) => {\n      const lowerCaseTitle = title.toLowerCase();\n      const lowerCaseQuery = query.toLowerCase();\n\n      switch (filterType) {\n        case FilterType.Completed:\n          return completed && lowerCaseTitle.includes(lowerCaseQuery);\n\n        case FilterType.Active:\n          return !completed && lowerCaseTitle.includes(lowerCaseQuery);\n\n        default:\n          return lowerCaseTitle.includes(lowerCaseQuery);\n      }\n    });\n  }, [todos, filterType, query]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                filterType={filterType}\n                query={query}\n                onClear={handleClearQuery}\n                onChange={handleQueryChange}\n                onChangeFilterType={handleFilterTypeChange}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={filteredTodos}\n                  todoId={selectedTodoId}\n                  onSelectTodo={handleSelectTodo}\n                  onSelectUser={handleSelectUser}\n                />\n              )}\n\n              {error && (\n                <div className=\"error\" style={{ color: 'red', textAlign: 'center' }}>\n                  Failed to fetch data. Please try again later.\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {!!selectedTodoId && (\n        <TodoModal\n          todos={todos}\n          userId={selectedUserId}\n          todoId={selectedTodoId}\n          onSelectTodo={handleSelectTodo}\n          onSelectUser={handleSelectUser}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}