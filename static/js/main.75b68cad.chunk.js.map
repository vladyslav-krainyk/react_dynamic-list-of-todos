{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","types/FilterTypes.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","todoId","onSelectTodo","onSelectUser","className","map","id","title","completed","userId","classNames","type","onClick","TodoFilter","query","filterType","onClear","onChange","onChangeFilterType","value","event","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","FilterType","getUser","TodoModal","useState","selectedUser","setSelectedUser","useEffect","fetchUser","a","userData","todo","filter","tod","href","email","name","App","setTodos","error","setError","All","setFilterType","isLoading","setIsLoading","setQuery","selectedTodoId","setSelectedTodoId","selectedUserId","setSelectedUserId","fetchTodos","data","handleSelectTodo","handleSelectUser","filteredTodos","useMemo","lowerCaseTitle","toLowerCase","lowerCaseQuery","includes","Completed","Active","color","textAlign","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.75b68cad.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  todoId: number,\n  onSelectTodo: (id: number) => void,\n  onSelectUser: (userId: number) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  todoId,\n  onSelectTodo,\n  onSelectUser,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(({\n        id,\n        title,\n        completed,\n        userId,\n      }) => (\n        <tr\n          key={id}\n          data-cy=\"todo\"\n          className=\"has-background-info-white\"\n        >\n          <td className=\"is-vcentered\">\n            {id}\n          </td>\n          <td className=\"is-vcentered\">\n            {completed && (\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            )}\n          </td>\n          <td className=\"is-vcentered is-expanded\">\n            <p className={\n              classNames(completed\n                ? 'has-text-success'\n                : 'has-text-danger')\n            }\n            >\n              {title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => {\n                onSelectTodo(id);\n                onSelectUser(userId);\n              }}\n            >\n              <span className=\"icon\">\n                <i\n                  className={classNames('far',\n                    id !== todoId ? 'fa-eye' : 'fa-eye-slash')}\n                />\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","/* eslint-disable max-len */\nimport React from 'react';\nimport { FilterType } from '../../types/FilterTypes';\n\ntype Props = {\n  query: string,\n  filterType: FilterType,\n  onClear: () => void,\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void,\n  onChangeFilterType: (type: FilterType) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  filterType,\n  onClear,\n  onChange,\n  onChangeFilterType,\n}) => {\n  const handleFilterTypeChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    onChangeFilterType(event.target.value as FilterType);\n  };\n\n  const handleClearButtonClick = () => {\n    onClear();\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filterType}\n            onChange={handleFilterTypeChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          onChange={onChange}\n          value={query}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleClearButtonClick}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum FilterType {\n  All = 'all',\n  Completed = 'completed',\n  Active = 'active',\n}\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  userId: number,\n  todoId: number,\n  onSelectTodo: (id: number) => void,\n  onSelectUser: (userId: number) => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  todos,\n  userId,\n  todoId,\n  onSelectTodo,\n  onSelectUser,\n}) => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      const userData = await getUser(userId);\n\n      setSelectedUser(userData);\n    };\n\n    fetchUser();\n  }, []);\n\n  const todo = todos.filter((tod => tod.id === todoId))[0];\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!selectedUser ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todoId}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => {\n                onSelectTodo(0);\n                onSelectUser(0);\n              }}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${selectedUser.email}`}>\n                {selectedUser.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useState, useEffect, useMemo } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { FilterType } from './types/FilterTypes';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [error, setError] = useState(false);\n  const [filterType, setFilterType] = useState(FilterType.All);\n  const [isLoading, setIsLoading] = useState(false);\n  const [query, setQuery] = useState('');\n  const [selectedTodoId, setSelectedTodoId] = useState(0);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n\n  useEffect(() => {\n    const fetchTodos = async () => {\n      setIsLoading(true);\n      try {\n        const data = await getTodos();\n\n        setTodos(data);\n        setIsLoading(false);\n      } catch {\n        setError(true);\n        setIsLoading(false);\n      }\n    };\n\n    fetchTodos();\n  }, []);\n\n  const handleSelectTodo = (id: number) => {\n    setSelectedTodoId(id);\n  };\n\n  const handleSelectUser = (userId: number) => {\n    setSelectedUserId(userId);\n  };\n\n  const handleClearQuery = () => {\n    setQuery('');\n  };\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  const handleFilterTypeChange = (type: FilterType) => {\n    setFilterType(type);\n  };\n\n  const filteredTodos = useMemo(() => {\n    return todos.filter(({ title, completed }) => {\n      const lowerCaseTitle = title.toLowerCase();\n      const lowerCaseQuery = query.toLowerCase();\n\n      switch (filterType) {\n        case FilterType.All:\n          return lowerCaseTitle.includes(lowerCaseQuery);\n\n        case FilterType.Completed:\n          return completed && lowerCaseTitle.includes(lowerCaseQuery);\n\n        case FilterType.Active:\n          return !completed && lowerCaseTitle.includes(lowerCaseQuery);\n\n        default:\n          return todos;\n      }\n    });\n  }, [todos, filterType, query]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                filterType={filterType}\n                query={query}\n                onClear={handleClearQuery}\n                onChange={handleQueryChange}\n                onChangeFilterType={handleFilterTypeChange}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={filteredTodos}\n                  todoId={selectedTodoId}\n                  onSelectTodo={handleSelectTodo}\n                  onSelectUser={handleSelectUser}\n                />\n              )}\n\n              {error && (\n                <div className=\"error\" style={{ color: 'red', textAlign: 'center' }}>\n                  Failed to fetch data. Please try again later.\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {selectedTodoId > 0 && (\n        <TodoModal\n          todos={todos}\n          userId={selectedUserId}\n          todoId={selectedTodoId}\n          onSelectTodo={handleSelectTodo}\n          onSelectUser={handleSelectUser}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}